///<reference path="~/scripts/NinJa.js" />
///<reference path="~/scripts/NinJaVisuals.js" />

var NinJaControls = {
    Version: "1.0"
};

if (typeof (NinJaVisuals) == "undefined") { alert("NinJaControls requires the NinJaVisuals extensions, be prepared for errors."); }

Div.Extensions.Add(new Extension("accordion", Accordion));

$Accordion = $AccordionItem = $Anchor;
Type.Accordion = Type.$++;
Type.AccordionItem = Type.$++;

function Accordion(e) {
    if (this.DOM === undefined) {
        return Accordion.Inherit(Accordion.Extend(new Div(e).ClassName("accordion")));
    }

    var $ = this;
    e = $.DOM;
    $.__si = null;
    //$.__ef = e.getAttribute("effect") || "none";
    $.__hc = e.getAttribute("headerclass") || "header";
    $.__sc = e.getAttribute("selectedclass") || "selected";
    $.__il = e.getAttribute("itemclass") || "item";
    $.Items = new ObservableArray($);

    var c = Array.From(e.children);
    var l = c.length;
    var v;
    for (var i = 0; i < l; i++) {
        v = c[i];
        if (v.tagName == "DIV") {
            v = v.$;
            AccordionItem.Extend(AccordionItem.Inherit(v));
            $.Items.Add(v);
            $.InsertElementBefore(v.Header, v);
            v.Classes.Add($.__il);
            v.Header.Classes.Add($.__hc);
            //v.__ef = new Effect(v, $.__ef, 1, 0, Speed.Normal, Smoothness.Smoothest);
        }
    }

    $.Items.OnChange.Add(new Delegate($.__ItemsChanged, $, [Delegate.Event]));
    $.OnSelectionChanged = new Event();
    $.Type = Type.Accordion;
}

// private event handlers
Accordion.prototype.__ItemsChanged = function (e) {
    var o = e.Objects, l = o.length, v, i;
    switch (e.ModificationType) {
        case ModificationType.Add:
            for (i = 0; i < l; i++) {
                v = o[i];
                this.AddElements([v.Header, v]);
                v.ClassName(this.__il).Header.ClassName(this.__hc);
                //v.__ef = new Effect(v, this.__ef, 1, 0, Speed.Fastest, Smoothness.Normal);
            }
            break;

        case ModificationType.Remove:
        case ModificationType.Clear:
            for (i = 0; i < l; i++) {
                v = o[i];
                this.Remove([v.Header, v]);
            }
            break;

        case ModificationType.Move:
        case ModificationType.Swap:
        case ModificationType.Update:
            this.Remove(Array.From(this.DOM.children));
            o = this.Items;
            l = o.length;
            for (i = 0; i < l; i++) {
                v = o[i];
                this.AddElements([v.Header, v]);
            }
            break;
    }
}

Accordion.prototype.HeaderClass = function (c) {
    if (c === undefined) {
        return this.__hc;
    }

    this.__hc = c;
    var i, a = this.Items, l = a.length;
    for (i = 0; i < l; i++) {
        a[i].Header.ClassName(c);
    }

    return this;
}

Accordion.prototype.ItemClass = function (c) {
    if (c === undefined) {
        return this.__il;
    }

    this.__il = c;
    var i, a = this.Items, l = a.length;
    for (i = 0; i < l; i++) {
        a[i].ClassName(c);
    }

    return this;
}

Accordion.prototype.SelectedClass = function (c) {
    if (c === undefined) {
        return this.__sc;
    }

    this.__sc = c;
    if (this.__si) {
        this.__si.ClassName(c);
    }
    return this;
}

Accordion.prototype.SelectedItem = function (i) {
    var s = this.__si;
    if (i === undefined) {
        return s;
    }

    if (s) {
        s.Header.Classes.Remove(this.__sc);
        s.Collapsed(true); //s.__ef.Reverse();
    }

    s = i;
    if (i !== null) {
        s.Collapsed(false); // s.__ef.Play();
        s.Header.Classes.Add(this.__sc);
    }
    if (this.OnSelectionChanged.length > 0) {
        this.OnSelectionChanged.Fire(new EventArgs(this));
    }

    this.__si = s;

    return this;
}

//Accordion.prototype.Effect = function (e) {
//    this.__ef = e;
//    var i, a = this.Items, l = a.length, v;
//    for (i = 0; i < l; i++) {
//        v = a[i];
//        v.__ef = new Effect(v, e, 1, 0, Speed.Fastest, Smoothness.Normal);
//    }

//    return this;
//}


//-------------------------------------------
//- AccordionItem
//-------------------------------------------
//- Declarative attributes:
//- header - default: "" - Raw text that will be the header of the accordion item,
//- alternatively, include an element with class is "header"
//- selected - default: "false" - if true, this item will be the default selected item.
//-------------------------------------------
function AccordionItem(e) {
    if (this.DOM === undefined) {
        return AccordionItem.Inherit(AccordionItem.Extend(new Div(e)));
    }

    var $ = this;
    e = $.DOM;
    var t = e.getAttribute("header");

    $.Collapsed(true);
    $.Header = new Div().Cursor(Cursor.Pointer);

    if (t) {
        $.Header.Text(t);
    }

    t = $.ElementsByClassName("header");
    if (t[0]) {
        t = $Div(t[0]);
        t.DOM.parentNode.removeChild(t.DOM);
        t.Classes.Remove("header");
        $.Header.AddElement(t);
    }

    $.__sd = (e.getAttribute("selected") || "false").ToBoolean()

    $.Header.OnClick.Add(new Delegate($.Toggle, $, ["Selected"]));
    //$.__ef = null;
    $.Type = Type.AccordionItem;
}
AccordionItem.prototype = new Div(null);
AccordionItem.prototype.constructor = AccordionItem;
AccordionItem.prototype.Selected = function (s) {
    var p = this.DOM.parentNode.$;
    if (s === undefined) {
        return p.__si == this;
    }

    if (s === true) {
        if (p.__si != this) {
            p.SelectedItem(this);
        }

        return this;
    }

    if (p.__si == this) {
        p.SelectedItem(null);
    }

    return this;
}

//- DatePicker
Type.DatePicker = Type.$++;
$DatePicker = $Anchor;

TextBox.Extensions.Add(new Extension("datepicker", DatePicker));

//-------------------------------------------
//- DatePicker
//-------------------------------------------
//- Declarative attributes
//- pad - default = "false" - Whether to display the dates before and after the current month.
//- padclass - default = "pad" - The class to apply to dates that fall before/after the current month.
//- selected - default = "selected" - The class to apply to the selected date.
//- effect - default = "none" - Effect used to hide/show the datepicker.
function DatePicker(e) {
    if (this.DOM === undefined) {
        return DatePicker.Inherit(DatePicker.Extend(new TextBox(e).ClassName("datepicker")));
    }
    var $ = this, t, a, i, v, l, b;
    $.Classes.Remove("datepicker");
    e = $.DOM;
    $.__dp = new Div().Position("absolute").Collapsed(true);
    t = $.__Table = new Table().ClassName("datepicker").CellPadding(0).CellSpacing(0).Style(Style.TableLayout, "fixed").Style(Style.ZIndex, NinJaVisuals.ZIndex++);
    t.SetHead(new TableHead());
    $.__dp.AddElement(t);
    $.__pc = e.getAttribute("padclass") || "pad";
    $.__pd = (e.getAttribute("pad") || "false").ToBoolean();
    $.__sd = e.getAttribute("selectedclass") || "selected";
    //$.__ef = e.getAttribute("effect") || "none";
    $.__CS = null;

    var d = $.Text();
    if (d && d.IsDate()) {
        d = new DateTime(d);
    }
    else {
        d = DateTime.Now();
    }
    $.__D = d.Date();
    $.__M = d.Month();
    $.__Y = d.Year();
    $.OnDateChanged = new Event($);
    var prev = new Anchor().Text("<");
    var next = new Anchor().Text(">");
    prev.DOM.tabIndex = next.DOM.tabIndex = 1000000;

    t.Head.Rows.Add(new Row().HorizontalAlignment("center"));
    t.Head.Rows[0].Cells.AddRange([new Cell().AddElement(prev),
                                   new Cell().ColumnSpan(5),
                                   new Cell().AddElement(next)]);

    t.Rows.Add(new Row().HorizontalAlignment("center"));
    t.Rows[0].Cells.AddRange([new Header().Text("S"),
                              new Header().Text("M"),
                              new Header().Text("T"),
                              new Header().Text("W"),
                              new Header().Text("T"),
                              new Header().Text("F"),
                              new Header().Text("S")]);

    if (e.onselectstart !== undefined) {
        e.onselectstart = function (e) { return false; };
    }
    else {
        $.OnClick.Add(function (e) { e.Handled = e.CancelEvent = true; });
    }

    b = [];
    d = new Delegate($.__dd, $, [Delegate.Event]);
    for (i = 0; i < 6; i++) {
        a = [new Cell(),
             new Cell(),
             new Cell(),
             new Cell(),
             new Cell(),
             new Cell(),
             new Cell()];
        for (l = 0; l < 7; l++) {
            a[l].OnClick.Add(d);
        }
        v = new Row().HorizontalAlignment("center");
        v.Cells.AddRange(a);
        b.Add(v);
    }

    t.Rows.AddRange(b);

    prev.OnClick.Add(new Delegate($.__cm, $, [-1]));
    next.OnClick.Add(new Delegate($.__cm, $, [1]));
    $.OnFocus.Add(new Delegate($.Show, $));
    $.OnClick.Add(new Delegate($.Show, $));
    $.OnBlur.Add(new Delegate($.Hide, $));
    $.OnBlur.Add(new Delegate($._fd, $));
    $.OnKeyUp.Add(new Delegate($.Update, $));
    Page.OnClick.Add(new Delegate($.Hide, $));
    Page.AddElement($.__dp);
    $.Refresh();
};

// private event handlers
DatePicker.prototype._fd = function () {
    var t = this.Text();
    if (!t.IsDate()) {
        if ((t.length == 6 || t.length == 8) && t.IsInt()) {
            var m = t.Substring(0, 2).ToInt();
            var d = t.Substring(2, 4).ToInt();
            var y = t.Substring(4).ToInt();
            this.SelectedDate(new DateTime(y, m, d));
        }
    }
};

DatePicker.prototype.__cm = function (c) {
    var m = this.__M + c;
    if (m == 0) {
        m = 12;
        this.__Y--;
    }
    else if (m == 13) {
        m = 1;
        this.__Y++;
    }

    this.__M = m;
    this.Refresh();
};

DatePicker.prototype.__dd = function (e) {
    var t = e.Sender.Tag, s = e.Sender;
    if (t < 0) { return; }
    this.__D = t;
    if (this.__CS) {
        this.__CS.ClassName("");
    }
    this.__CS = s;
    s.ClassName(this.__sd);
    this.Text(new DateTime(this.__Y, this.__M, this.__D));
    this.Focus();
    this.Hide(true);
};

DatePicker.prototype.PadDays = function (p) {
    if (p === undefined) {
        return this.__pd;
    }

    this.__pd = p;
    this.Refresh();
    return this;
}

DatePicker.prototype.Show = function () {
    if (this.__fc) {
        this.__fc = false;
        return;
    }
    if (!this.__dp.Collapsed()) { return; }
    this.__dp.X(this.X()).Y(this.Y() + this.LayoutHeight()).Collapsed(false);
    // this.__ef.Play();
    return this;
};

DatePicker.prototype.Hide = function (f) {
    if ((this.IsFocused || this.__dp.IsMouseOver) && !f) {
        return;
    }

    if (this.__dp.Collapsed()) { return; }
    this.__fc = f;
    this.__dp.Collapsed(true);
    //this.__ef.Reverse();
    return this;

};

DatePicker.prototype.Update = function () {
    var t = this.Text();
    if (t.IsDate()) {
        var d = t.ToDateTime();
        this.__D = d.Date();
        this.__M = d.Month();
        this.__Y = d.Year();
        this.Refresh();
    }
    return this;

};

DatePicker.prototype.SelectedDate = function (d) {
    if (d === undefined) {
        var t = this.Text();
        if (t.IsDate()) {
            return t.ToDateTime();
        }

        return DateTime.Null;
    }

    if (d == null) {
        this.Text("");
    }
    else {
        this.Text(d.ToString());
    }
    this.Update();
    return this;
}

DatePicker.prototype.Pad = function (p) {
    if (p === undefined) {
        return this.__pd;
    }


    this.__pd = p;
    this.Refresh();
    return this;
}

DatePicker.prototype.PadClass = function (p) {
    if (p === undefined) {
        return this.__pc;
    }


    this.__pc = p;
    this.Refresh();
    return this;
};

DatePicker.prototype.SelectedClass = function (s) {
    if (s === undefined) {
        return this.__sd;
    }


    this.__sd = s;
    this.Refresh();
    return this;
};

DatePicker.prototype.Refresh = function () {
    this.__dp.DOM.firstChild.$.Head.Rows[0].Cells[1].Text(DateTime.Months.GetName(this.__M) + " " + this.__Y);
    var tb = this.__dp.DOM.firstChild.$.Body;
    var r = 1;
    var d = new DateTime(this.__Y, this.__M, 1);
    var D = d.Date(), M = d.Month(), Y = d.Year();
    var Mx = DateTime.Months.GetDays(this.__M, this.__Y) + 1;
    var cDow = DateTime.Days.Sunday, dow = d.DayOfWeek();
    var i, j, c = tb.Rows[r], e = 1;
    var cD = d.Subtract(new TimeSpan(24 * dow - cDow, 0));
    for (i = 0; i < dow; i++) {
        if (this.__pd) {
            c.Cells[i].Text(cD.Date() + i).ClassName(this.__pc).Tag = -1;
        }
        else {
            c.Cells[i].Text("").ClassName(this.__pc).Tag = -1;
        }
    }

    var brk = false;
    for (j = r; j < 8;) {
        c = tb.Rows[r];
        c.Collapsed(false);
        for (; i < 7; i++) {
            c.Cells[i].Text(e).ClassName(this.__D == e ? this.__sd : "").Tag = e;
            if (this.__D == e) {
                this.__CS = c.Cells[i];
            }
            e++;
            if (e > Mx) {
                brk = true;
                break;
            }
        }

        if (brk) {
            break;
        }
        else {
            i = 0;
            j++, r++;
        }
    }

    e = 1;
    while (j < 7) {

        c = tb.Rows[r];
        if (i == 0) {
            c.Collapsed(true);
        }
        else {
            for (; i < 7; i++, e++) {
                if (this.__pd) {
                    c.Cells[i].Text(e).ClassName(this.__pc).Tag = -1;
                }
                else {
                    c.Cells[i].Text("").ClassName(this.__pc).Tag = -1;
                }
            }
        }
        i = 0;
        j++;
        r++;
    }
};

//-------------- Dialog
var DialogResult = LazyEnum({
    Ok: 0,
    Cancel: 1,
    Yes: 2,
    No: 3
});

Div.Extensions.Add(new Extension("dialog", Dialog));
var $Dialog = $Anchor;

function Dialog(e) {
    if (this.DOM === undefined) {
        return Dialog.Inherit(Dialog.Extend(new Div(e).ClassName("dialog")));
    }

    var $ = this;
    e = $.DOM;
    // $.__ef1 = new Effect(Dialog.Filter, e.getAttribute("effect") || "none", Dialog.Opacity, 0, Speed.Faster, Smoothness.Smoother);
    //$.__ef2 = new Effect(Dialog.Filter.T, e.getAttribute("effect") || "none", 1, 0, Speed.Faster, Smoothness.Smoother);

    if (e.parentNode) {
        e.parentNode.removeChild(e);
    };

    Dialog.Dialogs.AddElement(e);
    $.OnDialogClose = new Event($);
    $.Result = null;
}

Dialog.CurrentDialog = null,
Dialog.Color = "black",
Dialog.Opacity = .5,
Dialog.ZIndex = 1000000,
Dialog.Filter = null;

Dialog.RemoveCurrent = function () {
    Dialog.Filter.T.Rows[0].Cells[0].RemoveElement(Dialog.CurrentDialog);
    Dialog.Dialogs.AddElement(Dialog.CurrentDialog);
}

Dialog.CloseCurrent = function (data) {
    var d = Dialog.CurrentDialog;
    if (d) {
        d.Result = data;
        if (d.OnDialogClose.Fire(new EventArgs(d, data)) != false) {
            Dialog.RemoveCurrent();
            Dialog.Filter.Collapsed(true);
            Dialog.Filter.T.Collapsed(true);
            Dialog.CurrentDialog = null;
        }
    }
}

Dialog.prototype.Show = function () {
    if (Dialog.CurrentDialog) {
        Dialog.RemoveCurrent();
    }
    Dialog.CurrentDialog = this;
    Dialog.Dialogs.RemoveElement(this);
    Dialog.Filter.Collapsed(false).T.Collapsed(false).Rows[0].Cells[0].AddElement(this);

    return this;

};

Dialog.prototype.Hide = function (data) {
    Dialog.CloseCurrent(data);
    return this;

};

NinJa.OnInitialization.Add(function () {
    Dialog.Dialogs = new Div().Collapsed(true);
    Page.AddElement(Dialog.Dialogs);
    Dialog.Filter = new Div().BackgroundColor(Dialog.Color).
                      Width("100%").
                      Height("100%").
                      Position("fixed").
                      X(0).
                      Y(0).
                      Collapsed(true);
    Dialog.Filter.T = new Table().
                      Width("100%").
                      Height("100%").
                      Position("fixed").
                      X(0).
                      Y(0).Collapsed(true);
    Dialog.Filter.T.Rows.Add(new Row().Height("100%"));
    Dialog.Filter.T.Rows[0].Cells.Add(new Cell().HorizontalAlignment("center").VerticalAlignment("middle").Height("100%"));
    Dialog.Filter.AddElement(Dialog.Dialogs);
    Dialog.Filter.Opacity(Dialog.Opacity);
    Page.AddElement(Dialog.Filter);
    Page.AddElement(Dialog.Filter.T);
});



Type.SuperTableColumn = Type.$++;
Type.SuperTable = Type.$++;
Table.Extensions.Add(new Extension("supertable", SuperTable));

//-------------------------------------------
//- Form Table
//-------------------------------------------
//- Currently cannot create new table forms programmatically.
//-------------------------------------------
//- Declarative attributes
//- highlight - default = "" - Class applied to a row when an input has focus.
//-------------------------------------------
function SuperTable(e) {
    var $ = this;
    var a, v, l, i;
    e = this.DOM;
    $.__hh = e.getAttribute("highlight") || "";

    if ($.__hh) {
        var ip = Array.From($.ElementsByTagName("input"))
                          .AddRange($.ElementsByTagName("select"))
                          .AddRange($.ElementsByTagName("textarea"));

        l = ip.length;
        for (i = 0; i < l; i++) {
            v = ip[i];
            v.OnFocus.Add(new Delegate($.__hi, $, [v, true]));
            v.OnBlur.Add(new Delegate($.__hi, $, [v, false]));
        }
    }
    a = this.Head.Rows[0].Cells;
    l = a.length;
    this.Columns = new Array();
    for (i = 0; i < l; i++) {
        this.Columns.Add(SuperTableColumn.Inherit(SuperTableColumn.Extend(a[i])));
    }

    Client.OnResize.Add(new Delegate($.RefreshWidth, $));


    $.Style("table-layout", "fixed").Style("border-collapse", "separate");
    $.Container = new Div().Width($.AttributeWidth());
    $.Container.Style(Style.WhiteSpace, "nowrap");
    e.parentNode.replaceChild($.Container.DOM, e);
    $.Container.AddElement($);
    $.Type = Type.SuperTable;
}

SuperTable.prototype.__hi = function (x, v) {
    //var r = this.DOM;
    //while ((r.$.Type != Type.Row) && r != this.DOM) {
    //    r = r.parentNode;
    //}

    //if (r.$.Type != Type.Row) {
    //    return;
    //}
    //r = r.$;

    //if (v === true) {
    //    if (!r.Classes.Contains(this.__hh)) {
    //        r.Classes.Add(this.__hh);
    //    }
    //}
    //else {
    //    r.Classes.Remove(this.__hh);
    //}
};

SuperTable.prototype.RefreshWidth = function () {
    var a = this.Columns, l = a.length, v, w, u, i, o;

    o = document.createElement("THEAD");
    this.AttributeWidth(0);
    var total = this.Container.LayoutWidth();
    this.AttributeWidth(total);
    this.Head.DOM.parentNode.replaceChild(o, this.Head.DOM);
    var lq = [];
    for (i = 0; i < l; i++) {
        w = this.Columns[i];
        v = w.__Width;
        switch (v.DynamicSizeType) {
            case DynamicSizeType.Static:
                w.AttributeWidth(v.Value);
                total -= v.Value;
                break;

            case DynamicSizeType.Relative:
                u = total * v.Value;
                w.AttributeWidth(u);
                total -= u;
                break;

            case DynamicSizeType.Liquid:
                lq.Add(w);
                break;
        }
    }

    l = lq.length;
    u = (total / lq.length).Round();
    for (i = 0; i < l; i++) {
        lq[i].AttributeWidth(u);
    }

    o.parentNode.replaceChild(this.Head.DOM, o);
    delete o;
    return this;
};

function SuperTableColumn() {
    if (this.DOM === undefined) {
        return SuperTableColumn.Inherit(SuperTableColumn.Extend(new Header()));
    }

    var $ = this;
    var e = $.DOM;
    $.Style(Style.Overflow, "hidden").Style(Style.WhiteSpace, "nowrap").Position("relative");

    $.__Sort = (e.getAttribute("sortable") || "true").ToBoolean();
    $.__Width = new DynamicSize(e.getAttribute("width") || "*");
    $.Type = Type.SuperTableColumn;
}

var DynamicSizeType = {
    Static: 0,
    Relative: 1,
    Liquid: 2
};

function DynamicSize(value) {
    this.Value = null;
    this.DynamicSizeType = DynamicSizeType.Liquid;
    this.Type = Type.DynamicSize;

    switch (value.Type) {
        case Type.String:
            if (value.EndsWith("%")) {
                this.Value = value.Remove("%").ToFloat() / 100;
                this.DynamicSizeType = DynamicSizeType.Relative;
            }
            else if (value == "*") {
                this.Value = null;
                this.DynamicSizeType = DynamicSizeType.Liquid;
            }
            else if (value.IsInt()) {
                this.Value = value.ToInt();
                this.DynamicSizeType = DynamicSizeType.Static;
            }
            break;

        case Type.Number:
            this.Value = value;
            this.DynamicSizeType = DynamicSizeType.Static;
            break;

    }
}
//-------------------------------------------
// FormTemplate
//-------------------------------------------
// For use on binding to forms
//-------------------------------------------

Div.Extensions.Add(new Extension("formtemplate", FormTemplate));
Type.FormTemplate = Type.$++;
$FormTemplate = $Anchor;
function FormTemplate(e) {
    if (this.DOM === undefined) {
        return FormTemplate.Inherit(FormTemplate.Extend(new Div(e).ClassName("formtemplate")));
    }
    this.Type = Type.FormTemplate;
}

FormTemplate.prototype.Bind = function (o) {
    var e = this.DOM;
    var f = Array.From(e.getElementsByTagName("input"))
                 .AddRange(e.getElementsByTagName("select"))
                 .AddRange(e.getElementsByTagName("textarea")),
                 l = inputs.length, i, p;
    for (i = 0; i < l; i++) {
        p = f[i].getAttribute("bindproperty");
        if (p) {
            if (o) {
                f[i].$.Value(NinJa.EvalBind(p, o));
            }
            else {
                f[i].Clear();
            }
        }
    }

    return this;
}

FormTemplate.prototype.CreatePropertyMap = function () {
    var d = new Dictionary(), f = Array.From(this.getElementsByTagName("input"))
                 .AddRange(f.getElementsByTagName("select"))
                 .AddRange(f.getElementsByTagName("textarea")),
                 l = inputs.length, i, p;
    for (i = 0; i < l; i++) {
        p = f[i].getAttribute("mapproperty");
        if (p) {
            if (f[i].$.Displayed()) {
                d[p] = f[i].$.Value();
            }
        }
    }

    return d;
}

//-------------------------------------------
//- One Click Button/Anchors
//-------------------------------------------
//- Prevents the buttons/anchors from being clicked more than once. Can be programatically
//- renabled.
//-------------------------------------------
Anchor.Extensions.Add(new Extension("oneclick", OneClickAnchor));
Button.Extensions.Add(new Extension("oneclick", OneClickButton));
ContentButton.Extensions.Add(new Extension("oneclick", OneClickContentButton));


function OneClickAnchor(e) {
    if (this.DOM === undefined) {
        return OneClickAnchor.Inherit(OneClickAnchor.Extend(new Anchor(e).ClassName("oneclick")));
    }
    var $ = this;
    $.OnClick.Add(new Delegate($.Enabled, $, [false]));
}

function OneClickButton(e) {
    if (this.DOM === undefined) {
        return OneClickAnchor.Inherit(OneClickAnchor.Extend(new Button(e).ClassName("oneclick")));
    }
    var $ = this;
    this.Enabled = Element.prototype.Enabled;
    $.OnClick.Add(new Delegate($.Enabled, $, [false]));
}

function OneClickContentButton(e) {
    if (this.DOM === undefined) {
        return OneClickAnchor.Inherit(OneClickAnchor.Extend(new ContentButton(e).ClassName("oneclick")));
    }
    var $ = this;
    $.OnClick.Add(new Delegate($.Enabled, $, [false]));
}

//-------------------------------------------
//- RollOver
//-------------------------------------------
//- Easy way to do mouse over effects with images.
//- Declarative attributes
//- hover - default = "" - src of image to show when you roll over the image.
//-------------------------------------------

ImageElement.Extensions.Add(new Extension("rollover", RollOverImage));

$RollOverImage = $TextBox;

function RollOverImage(e) {
    if (this.DOM === undefined) {
        return RollOverImage.Inherit(RollOverImage.Extend(new ImageElement(e).ClassName("rollover")));
    }

    var $ = this;
    e = $.DOM;
    $.__H = e.getAttribute("hover") || "";
    $.__OS = ImageElement.prototype.Source;
    $.__MOv = new Delegate($.__OS, $, [$.__H])
    $.__MOu = new Delegate($.__OS, $, [e.src])
    if ($.__H != null) {
        $.OnMouseOver.Add($.__MOv);
        $.OnMouseOut.Add($.__MOu);
    }

    return e;
}

RollOverImage.prototype.Source = function (s) {
    if (s === undefined) {
        return this.__MOu.Parameters[0];
    }

    this.__MOu.Parameters[0] = s;
    if (!this.IsMouseOver) {
        this.src = s;
    }
    return this;
}

RollOverImage.prototype.HoverSource = function (s) {
    if (s === undefined) {
        return this.__MOv.Parameters[0];
    }
    this.__MOv.Parameters[0] = s;
    if (this.IsMouseOver) {
        this.src = s;
    }
    return this;
}
//-------------------------------------------
//- ScrollBar
//-------------------------------------------
//- Default images include increase.png, increase2.png, decrease.png, decrease2.png, thumb.png and thumb2.png
//-------------------------------------------
//- Typical styling for vertical bars
//- .decrease.thumb { background-image: url('/images/decrease.png'); }
//- .decrease.thumb:hover { background-image: url('/images/decrease2.png'); }
//- .increase.thumb { background-image: url('/images/increase.png'); }
//- .increase.thumb:hover { background-image: url('/images/increase2.png'); }             
//- .track.thumb { border: 1px solid #9a9a9a; background-image: url('/images/track.png'); border-radius: 1px 1px 1px 1px; -webkit-border-radius: 1px 1px 1px 1px; -moz-border-radius: 1px 1px 1px 1px; }
//- .track.thumb:hover { background-image: url('/images/track2.png'); }
//-------------------------------------------
// - Typical styling for horizontal bars
//- .horizontal .decrease.thumb { background-image: url('/images/hdecrease.png'); }
//- .horizontal .decrease.thumb:hover { background-image: url('/images/hdecrease2.png'); }
//- .horizontal .increase.thumb { background-image: url('/images/hincrease.png'); }
//- .horizontal .increase.thumb:hover { background-image: url('/images/hincrease2.png'); }
//- .horizontal .track.thumb { border: 1px solid #9a9a9a; background-image: url('/images/htrack.png'); border-radius: 1px 1px 1px 1px; -webkit-border-radius: 1px 1px 1px 1px; -moz-border-radius: 1px 1px 1px 1px; }            
//- .horizontal .track.thumb:hover { background-image: url('/images/htrack2.png'); }
//-------------------------------------------
//- Declarative attributes
//- maxvalue - default = "10" - max value of the scrollbar.
//- direction - default = "vertical" - direction the scroll bar operates in.
//-------------------------------------------

Type.ScrollBar = Type.$++;
Div.Extensions.Add(new Extension("scrollbar", ScrollBar));
$ScrollBar = $TextBox;
function ScrollBar(e) {
    if (this.DOM === undefined) {
        return ScrollBar.Inherit(ScrollBar.Extend(new Div(e).ClassName("scrollbar")));
    }

    var $ = this;
    e = $.DOM;
    $.__Orient = e.getAttribute("direction") || "vertical";
    $.__Width = Element.prototype.Width;
    $.__Height = Element.prototype.Height;
    $.Width = ScrollBar.prototype.Width;
    $.Height = ScrollBar.prototype.Height;
    var w, h;
    w = e.getAttribute("swidth") || $.__Orient == "horizontal" ? "100" : "15";
    h = e.getAttribute("sheight") || $.__Orient == "horizontal" ? "15" : "100";
    $.ClearTextNodes().Style(Style.Display, "inline-block").Style(Style.BoxSizing, "border-box").NaturalDisplay = "inline-block";
    if (w) {
        $.__Width(w.ToInt());
    }
    if (h) {
        $.__Height(h.ToInt());
    }

    var v = $.ElementsByClassName("decrease")[0];

    if (!v) {
        v = new Div();
        $.AddElement(v);
    }

    $.DecreaseThumb = v.ClassName("decrease thumb").Style(Style.BoxSizing, "border-box")
    v = $.ElementsByClassName("increase")[0];
    if (!v) {
        v = new Div();
        $.AddElement(v);
    }

    $.IncreaseThumb = v.ClassName("increase thumb")

    v = $.ElementsByClassName("track")[0];
    if (!v) {
        $.TrackThumb = TrackThumb.Inherit(TrackThumb.Extend(new Div()));
        $.TrackThumb.ClassName("track thumb");
    }
    else {
        $.TrackThumb = v.ClassName("track thumb")
        $.RemoveElement($.TrackThumb);
    }



    $.Track = new Div().Style(Style.BoxSizing, "border-box");
    $.InsertElement(1, $.Track);
    $.Track.AddElement($.TrackThumb);
    $.__Value = 0;
    if ($.__Orient == "horizontal") {
        $.IncreaseThumb.Style(Style.Display, "inline-block");
        $.DecreaseThumb.Style(Style.Display, "inline-block");
        $.Track.Style(Style.Display, "inline-block").Height("100%");
        $.IncreaseThumb.Width(16).Height("100%");
        $.DecreaseThumb.Width(16).Height("100%");
        $.TrackThumb.Height("100%");
    }
    else {
        $.IncreaseThumb.Width(15).Height(16);
        $.DecreaseThumb.Width(15).Height(16);
    }
    var max = (e.getAttribute("maxvalue") || "10").ToInt();

    $.Track.OnMouseWheel.Add(new Delegate($.__HandleScroll, $, [Delegate.Event]));
    $.Track.OnClick.Add(new Delegate($.__HandleTrackClick, $, [Delegate.Event]));
    $.DecreaseThumb.OnClick.Add(new Delegate($.Decrease, $));
    $.IncreaseThumb.OnClick.Add(new Delegate($.Increase, $));
    $.__RefreshView();
    $.MaxValue(max);
    $.OnScrollChange = new Event();
    $.Type = Type.ScrollBar;
}

ScrollBar.prototype.__HandleScroll = function (e) {
    this.Value(this.__Value + e.Clicks);
    e.Handled = true;
};


ScrollBar.prototype.__HandleTrackClick = function (e) {
    if (this.__Orient == "horizontal") {
        var x = Mouse.X - this.Track.X();
        if (x < this.TrackThumb.X()) {
            this.Value(this.__Value - this.TrackThumb.LayoutWidth());
        }
        else {
            this.Value(this.__Value + this.TrackThumb.LayoutWidth());
        }
    } else {
        var y = Mouse.Y - this.Track.Y();
        if (y < this.TrackThumb.Y()) {
            this.Value(this.__Value - this.TrackThumb.LayoutHeight());
        }
        else {
            this.Value(this.__Value + this.TrackThumb.LayoutHeight());
        }
    }
};

ScrollBar.prototype.Width = function (w) {
    if (w === undefined) {
        return this.__Width(w);
    }

    this.__Width(w);
    this.__RefreshView();
    this.MaxValue(this.__MaxValue);
    return this;
};

ScrollBar.prototype.Height = function (h) {
    if (h === undefined) {
        return this.__Width(h);
    }

    this.__Height(h);
    this.__RefreshView();
    this.MaxValue(this.__MaxValue);
    return this;
};

//change track thumb to position in the middle
ScrollBar.prototype.MaxValue = function (m) {
    if (m == undefined) {
        return this.__MaxValue;
    }

    var h;
    m = m < 0 ? 0 : m;
    if (m) {
        this.__MaxValue = m;
        if (this.__Orient == "horizontal") {
            h = this.Track.LayoutWidth() - m;
            if (h < 8) {
                this.TrackThumb.Width(8);
                this.__Step = (this.Track.LayoutWidth() - 8) / m;
            }
            else {
                this.TrackThumb.Width(h);
                this.__Step = 1;
            }
        }
        else {
            h = this.Track.LayoutHeight() - m;
            if (h < 8) {
                this.TrackThumb.Height(8);
                this.__Step = (this.Track.LayoutHeight() - 8) / m;
            }
            else {
                this.TrackThumb.Height(h);
                this.__Step = 1;
            }
        }
        if (this.__Value > this.__MaxValue) {
            this.__Value = this.__MaxValue;
        }
    }
    else {
        this.__Step = this.__Value = 0;
    }
    this.Refresh();
};

ScrollBar.prototype.Refresh = function () {
    if (this.__Orient == "horizontal") {
        this.TrackThumb.X(this.__Step * this.__Value);
    }
    else {
        this.TrackThumb.Y(this.__Step * this.__Value);
    }
};

ScrollBar.prototype.__RefreshView = function () {
    if (this.__Orient == "horizontal") {
        this.Track.Width(this.LayoutWidth() - (this.DecreaseThumb.LayoutWidth() + this.IncreaseThumb.LayoutWidth()));
    }
    else {
        this.Track.Height(this.LayoutHeight() - (this.DecreaseThumb.LayoutHeight() + this.IncreaseThumb.LayoutHeight()));
    }
};

ScrollBar.prototype.Value = function (value) {
    if (value === undefined) {
        return this.__Value;
    }

    this.__Value = value > this.__MaxValue ? this.__MaxValue : (value < 0 ? 0 : value);
    this.OnScrollChange.Fire(new EventArgs(this, this.__Value));
    this.Refresh();
    return this;
};

ScrollBar.prototype.Decrease = function () {
    this.Value(this.__Value - 1);
    return this;
}

ScrollBar.prototype.Increase = function () {
    this.Value(this.__Value + 1);
    return this;
}
function TrackThumb() {
    var $ = this;
    $.Style(Style.BoxSizing, "border-box").Position("relative");
    $.OnMouseDown.Add(new Delegate($.CaptureMove, $));
    $.TrackDelegate = new Delegate($.Move, $);
    $.TrackDelegate.Enabled = false;
    $.OnClick.Add(function (e) { e.Handled = true; });
    Page.OnMouseMove.Add($.TrackDelegate);
    Page.OnMouseUp.Add(new Delegate($.LoseMove, $));
}

TrackThumb.prototype.CaptureMove = function () {
    NinJa.Event.Handled = true;
    this.__X = this.X();
    this.__Y = this.Y();
    this.TrackDelegate.Enabled = true;
    this.Classes.Add("focus");
};

TrackThumb.prototype.LoseMove = function () {
    this.TrackDelegate.Enabled = false;
    this.Classes.Remove("focus");
};

TrackThumb.prototype.Move = function () {
    var s = this.DOM.parentNode.parentNode.$;

    if (s.__Orient == "horizontal") {
        var x = this.__X += Mouse.XChange;
        var v = x / s.__Step;
        s.Value(v.Round());
    }
    else {
        var y = this.__Y += Mouse.YChange;
        var z = y / s.__Step;

        s.Value(z.Round());
    }
};

//-------------------------------------------
//- SuggestionBox
//-------------------------------------------
//- Declarative attributes
//- displayclass - default = "display" - Class of the suggestion list.
//- focusclass - default = "focus" - Class of the focused item in the suggestion list.
//- source - Name of the function that will return the suggested values. This function will be passed
//- the current value of the suggestio box.
//- minlength - default = "3" - Minimal length of the text before suggestions can be displayed.
//- bindtext - default = "" - Text to display from the suggestion's object list.
//- bindvalue - default = "" - Value to associate with each suggestion item.
//-------------------------------------------

$SuggestionBox = $TextBox;
TextBox.Extensions.Add(new Extension("suggestion", SuggestionBox));
Type.SuggestionBox = Type.$++;

function SuggestionBox(e) {
    if (this.DOM === undefined) {
        return SuggestionBox.Inherit(SuggestionBox.Extend(new TextBox(e).ClassName("suggestion")));
    }

    var $ = this;
    e = $.DOM;
    e.setAttribute("autocomplete", "off");
    $.__dp = new Div().Position("absolute").Collapsed(true);
    $.__cs = e.getAttribute("displayclass") || "display";
    $.__FocusClass = (e.getAttribute("focusclass") || "focus");
    $.__Source = e.getAttribute("source") || null;
    $.__MinLength = (e.getAttribute("minlength") || "3").ToInt();
    $.__Text = (e.getAttribute("bindtext") || "");
    $.__Value = (e.getAttribute("bindvalue") || "");
    $.__AnchorCache = [];
    $.__CurrentAnchors = [];
    $.__CurrentAnchor = null;
    $.__StopShow = false;
    $.__Header = (e.getAttribute("header") || "");
    $.OnSuggestionSelected = new Event($);

    if ($.__Source) {
        $.__Source = window[$.__Source];
    }

    Page.AddElement($.__dp);

    $.__dp.Style("overflow-y", "auto");
    $.__dp.Style("overflow-x", "hidden");
    $.Data = new Array(20);
    $.DisplayClass($.__cs);
    var d = new Delegate($.__HandleKeyDown, $, [Delegate.Event])
    $.__dp.OnKeyDown.Add(d);
    $.__CheckCache();
    $.Data = new ObservableArray($);
    $.OnSuggestionSelected = new Event($);
    $.OnFocus.Add(new Delegate($.__HandleKeyUp, $));
    $.OnBlur.Add(new Delegate($.HideSuggestions, $));
    $.OnKeyDown.Add(d);
    $.OnKeyUp.Add(new Delegate($.__HandleKeyUp, $, [Delegate.Event]));
    $.OnClick.Add(new Delegate($.__MuffleClick, $, [Delegate.Event]));
    $.__h = new Span().Text($.__Header);
    $.__dp.AddElement($.__h);
    $.__st = "";
    Page.OnClick.Add(new Delegate($.HideSuggestions, $));
    $.Type = Type.SuggestionBox;
}


SuggestionBox.prototype.__MuffleClick = function (e) {
    e.Handled = true;
};

SuggestionBox.prototype.Header = function (e) {
    if (e === undefined) {
        return this.__Header;
    }

    this.__Header = e;
    this.__h.Collapsed(e.length == 0).Text(this.__Header);
}

SuggestionBox.prototype.__CheckCache = function () {
    var a;
    while (this.Data.length > this.__AnchorCache.length) {
        a = new Anchor().Style(Style.Display, "block").Underline(false);
        a.OnClick.Add(new Delegate(this.__SelectData, this, [a]));
        this.__AnchorCache.Add(a);
    }
};

SuggestionBox.prototype.__HandleKeyDown = function (e) {
    e = $KeyEventArgs(e);
    switch (e.Key) {
        case Keys.Enter:
        case Keys.Tab:
            if (this.__CurrentAnchor) {
                this.SelectedData(this.__CurrentAnchor.Tag);
                e.Handled = true;
            }
            break;

        case Keys.DownArrow:
            if (this.__dp.Collapsed()) {
                this.ShowSuggestions();
            }
            this.__hiNext();
            break;

        case Keys.UpArrow:
            if (this.__dp.Collapsed()) {
                this.ShowSuggestions();
            }
            this.__hiPrevious();
            break;

    }
};

SuggestionBox.prototype.__HandleKeyUp = function (e) {
    if (this.__StopShow) {
        this.__StopShow = false;
        return;
    }

    if (e && (e.Key == Keys.UpArrow || e.Key == Keys.DownArrow)) {
        return;
    }

    if (this.Text().length >= this.__MinLength) {
        this.Update()
        if (this.Data.length > 0) {
            this.ShowSuggestions();
        }
        else {
            this.HideSuggestions(true);
        }
    } else {
        this.Bind([]);
        this.HideSuggestions(true);
    }
};

SuggestionBox.prototype.__SelectData = function (a) {
    this.SelectedData(a.Tag);
}

SuggestionBox.prototype.SelectedData = function (d) {
    if (d === undefined) {
        return this.__sdData;
    }

    this.__sdData = d;
    this.Text(NinJa.EvalBind(this.__Text, d));

    this.OnSuggestionSelected.Fire(new EventArgs(this, d));
    this.HideSuggestions(true);

    this.__StopShow = true;
    this.Update();
};

SuggestionBox.prototype.__hiNext = function () {
    if (this.__dp.Collapsed()) { return; }
    if (this.__CurrentAnchor) {
        if (this.__FocusClass) {
            this.__CurrentAnchor.Classes.Remove(this.__FocusClass);
        }
        else {
            this.__CurrentAnchor.BackgroundColor("").ForegroundColor("");
        }
    }

    var i = this.__CurrentAnchors.IndexOf(this.__CurrentAnchor);
    i++;
    if (i >= this.__CurrentAnchors.length) {
        i = 0;
    }
    else if (i == -1) {
        i = 0;
    }

    this.__CurrentAnchor = this.__CurrentAnchors[i];
    if (this.__FocusClass) {
        this.__CurrentAnchor.Classes.Add(this.__FocusClass);
    }
    else {
        this.__CurrentAnchor.BackgroundColor("#3399ff").ForegroundColor("#ffffff");
    }
    if (this.__dp.ElementClipped(this.__CurrentAnchor)) {
        this.__dp.VerticalScrollToElement(this.__CurrentAnchor);
    }
};

SuggestionBox.prototype.__hiPrevious = function () {
    if (this.__dp.Collapsed()) { return; }
    if (this.__CurrentAnchor) {
        if (this.__FocusClass) {
            this.__CurrentAnchor.Classes.Remove(this.__FocusClass);
        }
        else {
            this.__CurrentAnchor.BackgroundColor("").ForegroundColor("");
        }
    }

    var i = this.__CurrentAnchors.IndexOf(this.__CurrentAnchor);
    i--;
    if (i < 0) {
        i = this.__CurrentAnchors.length - 1;
    }

    this.__CurrentAnchor = this.__CurrentAnchors[i];
    if (this.__FocusClass) {
        this.__CurrentAnchor.Classes.Add(this.__FocusClass);
    }
    else {
        this.__CurrentAnchor.BackgroundColor("#3399ff").ForegroundColor("#ffffff");
    }
    if (this.__dp.ElementClipped(this.__CurrentAnchor)) {
        this.__dp.VerticalScrollToElement(this.__CurrentAnchor);
    }
};

SuggestionBox.prototype.DisplayClass = function (c) {
    if (c === undefined) {
        return this.__dp.ClassName();
    }

    this.__dp.ClassName(c);
    if (!c) {
        this.__dp.Style(Style.Border, "1px solid #000000").BackgroundColor(Colors.White).Height(200);
    }
    else {
        this.__dp.Style(Style.Border, "").BackgroundColor(Colors.Empty).Style(Style.Padding, "");
    }
    return this;
}

SuggestionBox.prototype.FocusClass = function (c) {
    if (c === undefined) {
        return this.__FocusClass;
    }

    this.__FocusClass = c;
    return this;
}

SuggestionBox.prototype.Source = function (s) {
    if (s === undefined) {
        return ths.__Source;
    }

    this.__Source = s;
    return this;
}

SuggestionBox.prototype.MinLength = function (m) {
    if (m === undefined) {
        return this.__MinLength;
    }

    this.__MinLength = m;
    return this;
}

SuggestionBox.prototype.ShowSuggestions = function () {
    if (!this.__StopShow) {
        if (this.Data.length > 0) {
            this.__dp.X(this.X()).Y(this.Y() + this.LayoutHeight());
            this.__dp.Width("").Collapsed(false).Width(this.__dp.LayoutWidth() + 17);
        }
    }

    return this;
};

SuggestionBox.prototype.HideSuggestions = function (f) {
    if (f === undefined) {
        if (this.__dp.IsMouseOver) {
            return;
        }
    }

    this.__dp.Collapsed(true);
    return this;
};

SuggestionBox.prototype.Update = function () {
    var data;

    if (this.__Source) {
        data = this.__Source(this.Text());

        if (data) {
            this.Bind(data);
        }
    }

    if (this.__CurrentAnchor) {
        if (this.__FocusClass) {
            this.__CurrentAnchor.Classes.Remove(this.__FocusClass);
        }
        else {
            this.__CurrentAnchor.BackgroundColor("").ForegroundColor("");
        }
        this.__CurrentAnchor = null;
    }

    return this;
}

SuggestionBox.prototype.Bind = function (data) {
    this.Data.BeginUpdate();
    this.Data.Clear();
    this.Data.AddRange(data);
    this.Data.EndUpdate();
    this.__CheckCache();
    this.Refresh();
    this.ShowSuggestions();
    return this;
};

SuggestionBox.prototype.BindText = function (t) {
    if (t === undefined) {
        return this.__Text;
    }

    this.__Text = t;
    return this;
}

SuggestionBox.prototype.BindValue = function (v) {
    if (v === undefined) {
        return this.__Value;
    }

    this.__Value = v;
    return this;
}

SuggestionBox.prototype.Refresh = function () {
    this.__dp.RemoveElements(this.__CurrentAnchors);

    this.__CurrentAnchors.Clear();
    var l = this.Data.length;
    var d = this.Data;
    var a, v;

    var text = this.__Text;
    var value = this.__Value;
    for (var i = 0; i < l; i++) {
        v = d[i];
        a = this.__AnchorCache[i];
        a.Classes.Clear();
        a.Text(NinJa.EvalBind(this.__Text, v));
        a.Tag = v;

        this.__dp.AddElement(a);
        this.__CurrentAnchors.Add(a);
    }
};

//-------------------------------------------
//- Template
//-------------------------------------------
//- Any where the {BindProperty} syntax appears in a template div, it will be used to for template binding.
//-------------------------------------------
$Template = $Anchor;
Type.Template = Type.$++;

Div.Extensions.Add(new Extension("template", Template));
function Template(e) {
    if (this.DOM === undefined) {
        return Template.Inherit(Template.Extend(new Div(e).ClassName("template")));
    }

    if (e !== undefined) {
        this.Bind(null);
    }
}

Template.prototype.TemplateNode = function (tp) {
    this.RemoveElements(Array.From(this.DOM.childNodes));
    this.AddElement(tp);
    var a = this.__al = NinJaControls.__GetAllNodes(tp, []), k = a.length;
    this.__tp = [];
    for (var j = 0; j < k; j++) {
        this.__tp.push(a[j].nodeValue);
    }
}

Template.prototype.Bind = function (obj) {
    obj = obj || {};
    var k;
    if (this.__tp === undefined) {
        this.TemplateNode(this.DOM);
    }

    var reg = /\{[A-Za-z\.]*}/i, property, a, b, v, w, x, y, c = this.__tp, l = c.length;
    for (var i = 0; i < l; i++) {
        v = c[i];
        w = this.__al[i];
        w.nodeValue = String.BindFormat(v, obj);
    }

    this.Tag = obj;
    this.Type = Type.Template;
    return this;
};


NinJaControls.__GetAllNodes = function (e, array) {
    var a = e.childNodes;
    var l = a.length;
    var v;
    for (var i = 0; i < l; i++) {
        v = a[i];
        if (v.nodeName != "#text") {
            var b = v.attributes, m = b.length;
            for (var j = 0; j < m; j++) {
                if (String.BindRegEx.exec(b[j].value)) {
                    array.push(b[j]);
                    break;
                }
            }
        }
        else {
            if (String.BindRegEx.exec(v.nodeValue)) {
                array.push(v);
            }
        }
        NinJaControls.__GetAllNodes(v, array);
    }

    return array;
}

//-------------------------------------------
// - WaterMarkTextBox
//-------------------------------------------
// - Declarative attributes
// - WaterMarkvalue - default = "" - Value to display when the TextBox is empty.
// - WaterMarkclass - default = "" - Class to apply to the TextBox when it is empty.
// - WaterMarkstyle - default = "" - Style to apply to the TextBox when it is empty.
//------------------------------------------- 
TextBox.Extensions.Add(new Extension("watermark", WaterMarkTextBox));
$WaterMarkTextBox = $TextBox;
Type.WaterMarkTextBox = Type.$++;
function WaterMarkTextBox(e) {
    if (this.DOM === undefined) {
        return WaterMarkTextBox.Inherit(WaterMarkTextBox.Extend(new TextBox(e).ClassName("watermark")));
    }

    var $ = this;
    e = $.DOM;
    $.__OStyle = e.getAttribute("style") | "";
    $.__OClass = e.className;
    $.__OText = $.Text;
    $.Text = $.__Text;
    $.__WaterMarkValue = e.getAttribute("watermarkvalue") || "";
    $.__WaterMarkClass = (e.getAttribute("watermarkclass") || "");
    $.__WaterMarkStyle = e.getAttribute("watermarkstyle") || "";
    if (!$.__WaterMarkClass && !$.__WaterMarkStyle) {
        $.__WaterMarkStyle = "color: #c0c0c0;";
    }
    $.OnBlur.Add(WaterMarkTextBox.prototype.__CheckValue);
    $.OnFocus.Add(WaterMarkTextBox.prototype.__RemoveWaterMark);
    $.HasValue = false;
    $.__CheckValue();
    Page.Form.OnSubmit.Add(new Delegate($.__SafeSubmit, $));
    $.Type = Type.WaterMarkTextBox;
}

WaterMarkTextBox.prototype.__SafeSubmit = function () {
    if (!this.HasValue) {
        this.DOM.value = "";
    }
};

WaterMarkTextBox.prototype.__Text = function (t) {
    if (t === undefined) {
        t = this.__OText();
        return t == this.__WaterMarkValue ? "" : t;
    }

    this.__OText(t);
    return this;
}

WaterMarkTextBox.prototype.__CheckValue = function () {
    var e = this.DOM;
    if (e.value.length == 0) {
        this.HasValue = false;
        e.value = this.__WaterMarkValue;
        e.setAttribute("style", this.__WaterMarkStyle);
        e.className = this.__WaterMarkClass;
    }
    else {
        this.HasValue = true;
    }
}

WaterMarkTextBox.prototype.__RemoveWaterMark = function () {
    var e = this.DOM;
    if (e.value == this.__WaterMarkValue) {
        e.value = "";
        e.setAttribute("style", this.__OStyle);
        e.className = this.__OClass;
    }
}

WaterMarkTextBox.prototype.WaterMarkValue = function (v) {
    if (v === undefined) {
        return this.__WaterMarkValue;
    }

    this.__WaterMarkValue = v;
    this.__CheckValue();
    return this;
}
WaterMarkTextBox.prototype.WaterMarkClass = function (c) {
    var e = this.DOM;
    if (c === undefined) {
        return this.__WaterMarkClass;
    }

    this.__WaterMarkClass = c;
    if (e.value == this.__WaterMarkValue) {
        e.value = "";
    }
    this.__CheckValue();
    return this;
}

WaterMarkTextBox.prototype.WaterMarkStyle = function (m) {
    if (m === undefined) {
        return this.__WaterMarkStyle;
    }

    this.__WaterMarkStyle = m;
    this.__CheckValue();
    return this;
}


$CheckBoxList = $TextBox;
Span.Extensions.Add(new Extension("checkboxlist", CheckBoxList));

function CheckBoxList(e) {
    if (this.DOM === undefined) {
        return CheckBoxList.Inherit(CheckBoxList.Extend(new Span(e).ClassName("checkboxlist")));
    }

    var $ = this;
    e = $.DOM;
    $.Items = new ObservableArray($);
    $.SelectedItems = new ObservableArray($);
    var a = Array.From(e.childNodes), l = a.length, i, v;
    for (i = 0; i < l; i++) {
        v = a[i];
        if (v.tagName == "SPAN") {
            $.Items.Add(v.$);
            CheckBoxListItem.Inherit(CheckBoxListItem.Extend(v.$, v));
            if (v.$.Selected()) {
                $.SelectedItems.Add(v.$);
            }
        }
    }

    $.Items.OnChange.Add(new Delegate($.__UpdateItems, $, [Delegate.Event]));
    $.SelectedItems.OnChange.Add(new Delegate($.__SelectedItemsChanged, $, [Delegate.Event]));

    $.__Updating = false;

    $.OnSelectionChanged = new Event($);

    var o = e.getAttribute("onchange");
    if (o) {
        $.OnSelectionChanged.Add(new Function(o));
    }
}

CheckBoxList.prototype.__UpdateItems = function (e) {
    var e = e.Sender.Owner, i = 0, t = e.Items, l = t.length, v;

    this.ClearContent();
    this.SelectedItems.BeginUpdate().Clear();

    for (; i < l; i++) {
        v = t[i];
        e.AddElement(v);
        v.Parent = e;
        if (v.Selected()) {
            e.SelectedItems.Add(v);
        }
    }
    this.SelectedItems.EndUpdate(false)
};

CheckBoxList.prototype.__SelectedItemsChanged = function (e) {
    var d = e.Sender.Owner, t = d.SelectedItems, m = d.Items, l = m.length, i, v;

    for (i = 0; i < l; i++) {
        m[i].__Updating = true;
        m[i].Selected(t.Contains(m[i]));
        m[i].__Updating = false;
    }

    d.OnSelectionChanged.Fire(new EventArgs(d, d.SelectedItems));
};

CheckBoxList.prototype.__ItemChanged = function (c) {
    var e= this;
    if (e.__Updating) { return; }
    e.__Updating = true;
    if (c.Selected()) {
        e.SelectedItems.Add(c);
    }
    else {
        e.SelectedItems.Remove(c);
    }
    e.__Updating = false;
    e.OnSelectionChanged.Fire(new EventArgs(e, e.SelectedItems));
};


CheckBoxList.prototype.SelectedValue = function () {
    var s = "", i, t = this.SelectedItems, l = t.length;
    for (i = 0; i < l; i++) {
        if (s.length == 0) {
            s += t[i].Value();
        }
        else {
            s += "," + t[i].Value();
        }
    }

    return s;
};

function CheckBoxListItem(e) {
    if (this.DOM === undefined) {
        return CheckBoxListItem.Inherit(CheckBoxListItem.Extend(new Span(e)));
    }

    
    var $ = this;
    e = $.DOM;

    var a = Array.From(e.childNodes), l = a.length, i, v;

    for (i = 0; i < l; i++) {
        v = a[i];
        if (v.tagName == "INPUT" && v.type == "checkbox") {
            $.__cb = v.$;
            $.__Value = e.getAttribute("value") || "";
        }
        else if (v.tagName == "LABEL") {
            $.__lb = v.$;
        }
    }

    if ($.__cb === undefined) {
        $.__cb = new CheckBox("cbx" + CheckBoxListItem.IdGen++);
        $.__lb = new Label().For($.__cb.DOM.id);
        $.AddElements([$.__cb, $.__lb]);
    }

    $.__cb.OnCheckChanged.Add(new Delegate($.__np, $));
    $.Parent = null;
    $.__Updating = false;
}

CheckBoxListItem.IdGen = 0;
CheckBoxListItem.prototype.Selected = CheckBox.prototype.Checked;

CheckBoxListItem.prototype.Content = function (e) {
    if (e === undefined) {
        return this.__lb.Content();
    }

    this.__lb.Content(e);
    return this;
};


CheckBoxListItem.prototype.Text = function (e) {
    if (e === undefined) {
        return this.__lb.Text();
    }

    this.__lb.Text(e);
    return this;
};

CheckBoxListItem.prototype.Value = function (e) {
    if (e === undefined) {
        return this.__cb.DOM.value;
    }

    this.__cb.DOM.value = e;
    return this;
};

CheckBoxListItem.prototype.Selected = function (e) {
    if (e === undefined) {
        return this.__cb.Checked(e);
    }

    this.__cb.Checked(e);
    return this;
}

CheckBoxListItem.prototype.__np = function () {
    if (this.__Updating) { return; }
    if (!NullOrUndefined(this.Parent)) {
        var s = this.Parent.SelectedItems;
        s.BeginUpdate();
        if (this.Selected()) {
            s.Add(this);
        }
        else {
            s.Remove(this);
        }

        s.EndUpdate(false);
    }
};

Div.Extensions.Add(new Extension("floatbox", FloatBox));

function FloatBox(e) {
    if (this.DOM === undefined) {
        return FloatBox.Inherit(FloatBox.Extend(new Div(e).ClassName("floatbox")));
    }

    var $ = this;
    e = $.DOM;
    Client.OnScroll.Add(new Delegate($.CheckFloatMode, $));
}

FloatBox.prototype.CheckFloatMode = function () {
    if (this.Style(Style.Position) == "fixed") {
        if (Client.VerticalScrollPosition() <= this.__OY) {
            this.Style(Style.Position, "");
        }
    }
    else {
        this.__OY = this.Y();
        this.__OW = this.Width();
        if (Client.VerticalScrollPosition() > this.Y()) {
            this.Style(Style.Position, "fixed").Y(0).Width(this.__OW);
        }
    }
}