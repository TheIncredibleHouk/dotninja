///<reference path="~/scripts/NinJa.js" />

var NinJaVisuals = {
    Version: "1.2",
    ZIndex: 1000
};

var Speed = {
    Slow: 400,
    Normal: 200,
    Fast: 100
};

var Alignment = {
    Top: 0,
    Bottom: 1,
    Left: 2,
    Right: 3,
    Center: 4,
    Middle: 5
};

var Side = {
    Top: 0,
    Bottom: 1,
    Left: 2,
    Right: 3
};

var Direction = {
    Vertical: 1,
    Horizontal: 2,
    Diagonal: 3
};

var Effects = LazyEnum({
    None: "none",
    Fade: "fade",
    Slide: "slide",
    FoldVertical: "foldv",
    FoldHorizontal: "foldh",
    FoldBoth: "foldd"
});

var Edge = LazyEnum({
    NorthWest: Cursor.NorthWest,
    SouthEast: Cursor.SouthEast,
    SouthWest: Cursor.SouthWest,
    NorthEast: Cursor.NorthEast,
    North: Cursor.North,
    West: Cursor.West,
    South: Cursor.South,
    East: Cursor.East
});

NinJaVisuals.TextHeight = function (t, f, s) {
    var d = new Span();
    f = f || "default";
    s = s || "default";
    d.Position("absolute").Style(Style.Padding, "0").Style(Style.Margin, "0").Style(Style.FontFamily, f).Style(Style.FontSize, s + "pt").Text(t);
    Page.AddElement(d);
    s = d.Height();
    Page.Remove(d);
    return s;
};

NinJaVisuals.TextWidth = function (t, f, s) {
    var d = new Span();
    f = f || "default";
    s = s || "default";
    d.Position("absolute").Style(Style.Padding, "0").Style(Style.Margin, "0").Style(Style.FontFamily, f).Style(Style.FontSize, s + "pt").Text(t);
    Page.AddElement(d);
    s = d.Width();
    Page.Remove(d);
    return s;
};

//function Effect(e, t, d, f, p, m) {
//    this.Data1 = d;
//    this.Data2 = f;
//    this.Data3 = this.Data4 = 0;
//    this.Type = t;
//    this.Speed = p || Speed.Normal;
//    this.Smoothness = m || Smoothness.Normal;
//    this.Element = e;
//    if (t == Effects.Fade) {
//        this.Element.Opacity(0);
//    }
//}


//Effect.prototype.Play = function (o) {
//    switch (this.Type) {
//        case Effects.None:
//            this.Element.Collapsed(false);
//            if (o) {
//                o();
//            }
//            break;

//        case Effects.Fade:
//            this.Element.Opacity(0);
//            this.Element.FadeTo(this.Data1, this.Speed, this.Smoothness, o);
//            break;

//        case Effects.Slide:
//            var x = this.Data1, y = this.Data2;
//            this.Data3 = this.Element.X();
//            this.Data4 = this.Element.Y();
//            this.Element.Slide(this.Data1, this.Data2, this.Speed, this.Smoothness, o);
//            this.Data1 = this.Data3;
//            this.Data2 = this.Data4;
//            this.Data3 = x;
//            this.Data4 = y;
//            break;

//        case Effects.FoldVertical:
//            this.Element.Unfold(Direction.Vertical, this.Speed, this.Smoothness, o);
//            break;

//        case Effects.FoldHorizontal:
//            this.Element.Unfold(Direction.Horizontal, this.Speed, this.Smoothness, o);
//            break;


//        case Effects.FoldBoth:
//            this.Element.Unfold(Direction.Diagonal, this.Speed, this.Smoothness, o);
//            break;
//    }
//}

//Effect.prototype.Reverse = function (o) {
//    switch (this.Type) {
//        case Effects.None:
//            this.Element.Collapsed(true);
//            if (o) {
//                o();
//            }
//            break;

//        case Effects.Fade:
//            this.Element.FadeOut(this.Speed, this.Smoothness, o);
//            break;

//        case Effects.Slide:
//            var x = this.Data1, y = this.Data2;
//            this.Data3 = this.Element.X();
//            this.Data4 = this.Element.Y();
//            this.Element.Slide(this.Data1, this.Data2, this.Speed, this.Smoothness, o);
//            this.Data1 = this.Data3;
//            this.Data2 = this.Data4;
//            this.Data3 = x;
//            this.Data4 = y;
//            break;

//        case Effects.FoldVertical:
//            this.Element.Fold(Direction.Vertical, this.Speed, this.Smoothness, o);
//            break;

//        case Effects.FoldHorizontal:
//            this.Element.Fold(Direction.Horizontal, this.Speed, this.Smoothness, o);
//            break;

//        case Effects.FoldBoth:
//            this.Element.Fold(Direction.Diagonal, this.Speed, this.Smoothness, o);
//            break;
//    }
//}

//// Animations
//Element.prototype.Slide = function (x, y, p, m, o) {
//    if (this.SlideInfo) {
//        this.SlideInfo.Timer.Stop();
//    }

//    this.SlideInfo = new SlideInfo(this, x, y, p, m, o);
//    this.SlideInfo.Timer.Start();
//    return this;
//}

//SlideInfo.Animate = function (s) {
//    s.CurrentX += s.IncrementX;
//    s.CurrentY += s.IncrementY;
//    s.Element.X(s.CurrentX.Round(0));
//    s.Element.Y(s.CurrentY.Round(0));
//    if ((s.IncrementX > 0 ? s.CurrentX >= s.StopX : s.CurrentX <= s.StopX) && (s.IncrementY > 0 ? s.CurrentY >= s.StopY : s.CurrentY <= s.StopY)) {
//        s.Timer.Stop();
//        s.Element.X(s.StopX);
//        s.Element.Y(s.StopY);
//        if (s.OnFinish !== undefined) {
//            s.OnFinish();
//        }
//        s.Element.s = undefined;
//    }
//}

//function SlideInfo(e, x, y, p, m, o) {
//    this.Element = e;
//    this.StopX = x;
//    this.StopY = y;
//    this.CurrentX = e.X();
//    this.CurrentY = e.Y();
//    p = p == undefined ? Speed.Normal : p;
//    m = m == undefined ? Smoothness.Normal : m;
//    this.OnFinish = o;
//    this.IncrementX = (x - this.CurrentX) / m;
//    this.IncrementY = (y - this.CurrentY) / m;
//    this.Timer = new Timer(new TimeSpan(0, 0, 0, p / m), true);
//    this.Timer.SynchronousTrigger = false;
//    this.Timer.OnTrigger.Add(new Delegate(SlideInfo.Animate, null, [this]));
//}

//Element.prototype.FadeIn = function (p, m, o) {
//    if (this.FadeInfo) {
//        this.FadeInfo.Timer.Stop();
//    }

//    this.FadeInfo = new FadeInfo(this, 1, p, m, o);
//    this.FadeInfo.Timer.Start();
//    return this;
//}

//Element.prototype.FadeOut = function (p, m, o) {
//    if (this.FadeInfo) {
//        this.FadeInfo.Timer.Stop();
//    }

//    this.FadeInfo = new FadeInfo(this, 0, p, m, o);
//    this.FadeInfo.Timer.Start();
//    return this;
//}

//Element.prototype.FadeTo = function (c, p, m, o) {
//    if (this.FadeInfo) {
//        this.FadeInfo.Timer.Stop();
//    }

//    this.FadeInfo = new FadeInfo(this, c, p, m, o);
//    this.FadeInfo.Timer.Start();
//    return this;
//}

//FadeInfo.Animate = function (f) {
//    f.CurrentOpacity += f.IncrementOpacity;
//    var o = f.CurrentOpacity.Round(-2);
//    f.Element.Opacity(o);
//    f.Element.Collapsed(o == 0);
//    if ((f.IncrementOpacity > 0 ? f.CurrentOpacity >= f.StopOpacity : f.CurrentOpacity <= f.StopOpacity)) {
//        f.Timer.Stop();
//        f.Element.Opacity(f.StopOpacity);
//        if (f.OnFinish) {
//            f.OnFinish();
//        }
//        f.Element.FadeInfo = undefined;
//    }
//}
function OpacityAnimation(el, fr, to, sp, sm) {
    this.Element = el;
    this.From = fr;
    this.To = to;
    this.Time = sp;
    this.Frames = sm;
    this.Value = fr;
    this.Dir = to > fr ? 1 : 0;
    this.Step = (to - fr) / sm;
    this.ID = this.Element.DOM.id;
    this.Timer = new Timer(sp / sm, true);
    this.Timer.OnTrigger.Add(new Delegate(this.Next, this));
}

OpacityAnimation.prototype.Start = function () {
    if (this.Element.$AN) {
        this.Element.$AN.Timer.Stop();
    }

    this.Element.$AN = this;
    this.Element.Opacity(this.From);
    this.Timer.Start();
    return this;
}

OpacityAnimation.prototype.Next = function () {
    this.Value += this.Step;

    if (this.Dir == 1) {
        if (this.Value >= this.To) {
            this.Element.Opacity(this.To);
            this.Timer.Stop();
            this.Element.$AN = null;
            return;
        }
    }
    else {
        if (this.Value <= this.To) {
            this.Element.Opacity(this.To);
            this.Timer.Stop();
            this.Element.$AN = null;
            return;
        }
    }

    this.Element.Opacity(this.Value);
};

Element.prototype.FadeOut = function (t, s) {
    t = t || 300;
    s = s || 6;
    return new OpacityAnimation(this, this.Opacity(), 0, t, s).Start();
};

Element.prototype.FadeIn = function (t, s) {
    t = t || 300;
    s = s || 6;
    return new OpacityAnimation(this, this.Opacity(), 1, t, s).Start();
};

Element.prototype.FadeTo = function (x, t, s) {
    t = t || 300;
    s = s || 6;
    return new OpacityAnimation(this, this.Opacity(), x, t, s).Start();
};


Element.prototype.ToggleFade = function (t, s) {
    t = t || 300;
    s = s || 6;
    return this.Opacity() == 1 ? this.FadeOut(t, s) : this.FadeIn(t, s);
};

function ResizeAnimation(el, frw, frh, tow, toh, sp, sm) {
    this.Element = el;
    this.FromWidth = frw;
    this.ToWidth = tow;
    this.FromHeight = frh;
    this.ToHeight = toh;
    this.Time = sp;
    this.Frames = sm;
    this.ValueWidth = frw;
    this.ValueHeight = frh;
    this.DirWidth = tow > frw ? 1 : 0;
    this.DirHeight = toh > frh ? 1 : 0;
    this.StepHeight = (toh - frh) / sm;
    this.StepWidth = (tow - frw) / sm;
    this.ID = this.Element.DOM.id;
    this.Timer = new Timer(sp / sm, true);
    this.Timer.OnTrigger.Add(new Delegate(this.Next, this));
}


ResizeAnimation.prototype.Start = function () {
    if (this.Element.$AN) {
        this.Element.$AN.Timer.Stop();
    }

    this.Element.$AN = this;
    this.Element.Width(this.FromWidth).Height(this.FromHeight);
    this.Timer.Start();
    return this;
}

ResizeAnimation.prototype.Next = function () {
    this.ValueWidth += this.StepWidth;
    this.ValueHeight += this.StepHeight;
    var w = h = false

    if (this.DirWidth == 1) {
        if (this.ValueWidth >= this.ToWidth) {
            this.Element.Width(this.ToWidth);
            w = true;
        }
    }
    else {
        if (this.ValueWidth <= this.ToWidth) {
            this.Element.Width(this.ToWidth);
            w = true;
        }
    }
    if(this.DirHeight == 1){
        if (this.ValueHeight >= this.ToHeight) {
            this.Element.Height(this.ToHeight);
            h = true;
        }
    }
    else {
        if (this.ValueHeight <= this.ToHeight) {
            this.Element.Height(this.ToHeight);
            h = true;
        }
    }

    if (w && h) {
        this.Timer.Stop();
        this.Element.$AN = null;
        return;
    }
    this.Element.Width(this.ValueWidth).Height(this.ValueHeight);
};

Element.prototype.Shrink = function (d, t, s) {
    d = d || Direction.Diagonal;
    t = t || 300;
    s = s || 20;
    var w = this.Width(), h = this.Height();
    return new ResizeAnimation(this, w, h, d & Direction.Horizontal ? 0 : w, d & Direction.Vertical ? 0 : h, t, s).Start();
}

Element.prototype.Grow = function (d, t, s) {
    d = d || Direction.Diagonal;
    t = t || 300;
    s = s || 20;
    var v = this.Visible();
    var ow = this.Width(), oh = this.Height();
    this.Visible(false).Style(Style.Width, "").Style(Style.Height, "");
    var w = this.Width(), h = this.Height();
    this.Width(ow).Height(oh).Visible(v);
    return new ResizeAnimation(this, ow, oh, d & Direction.Horizontal ? w : ow, d & Direction.Vertical ? h : oh, t, s).Start();
}

Element.prototype.ToggleSize = function (d, t, s) {
    if (this.Width() == 0) {
        return this.Grow(d, t, s);
    }

    return this.Shrink(d, t, s);
}

function Bounds() {
    this.Left = 0;
    this.Right = 0;
    this.Top = 0;
    this.Bottom = 0;
}

Bounds.prototype.Within = function (x, y) {
    return x.Between(this.Left, this.Right, true) && y.Between(this.Top, this.Bottom, true);
};

Bounds.prototype.OnEdge = function (x, y, e, p) {
    p = p || 1;
    switch (e) {
        case Edge.North:
            return y - this.Top <= p;

        case Edge.NorthWest:
            return y - this.Top <= p && x - this.Left <= p;

        case Edge.West:
            return x - this.Left <= p;

        case Edge.SouthWest:
            return this.Bottom - y <= p && x - this.Left <= p;

        case Edge.South:
            return this.Bottom - y <= p;

        case Edge.SouthEast:
            return this.Bottom - y <= p && this.Right - x <= p;

        case Edge.East:
            return this.Right - x <= p;

        case Edge.NorthEast:
            return y - this.Top <= p && this.Right - x <= p;
    }
};

Element.prototype.GetBounds = function () {
    var b = new Bounds();
    b.Left = this.X()
    b.Top = this.Y()
    b.Right = this.LayoutWidth() + b.Left;
    b.Bottom = this.LayoutHeight() + b.Top;
    return b;
};

Client.ElementClipped = function (e, side) {
    switch (side) {
        case Side.Top:
            return e.Y() < 0;

        case Side.Right:
            return e.X() + e.LayoutWidth() > Client.Width();

        case Side.Bottom:
            return e.Y() + e.LayoutHeight() > Client.Height();

        case Side.Left:
            return e.X();
    }
}

Element.prototype.SnapTo = function (parentElement, side, alignment, xPad, yPad) {
    xPad = xPad === undefined ? 0 : xPad;
    yPad = yPad === undefined ? 0 : yPad;
    switch (side) {
        case Side.Top:
            this.Y(parentElement.Y() - this.LayoutHeight() - yPad);
            break;

        case Side.Bottom:
            this.Y(parentElement.Y() + parentElement.LayoutHeight() + yPad);
            break;

        case Side.Left:
            this.X(parentElement.X() - this.LayoutWidth() - xPad);
            break;

        case Side.Right:
            this.X(parentElement.X() + parentElement.LayoutWidth() + xPad);
            break;
    }

    switch (alignment) {
        case Alignment.Top:
            this.Y(parentElement.Y());
            break;

        case Alignment.Bottom:
            this.Y(parentElement.Y() + parentElement.LayoutHeight() - this.LayoutHeight());
            break;

        case Alignment.Middle:
            this.Y((parentElement.Y() + parentElement.LayoutHeight()) - (parentElement.Y() + parentElement.LayoutHeight() / 2));
            break;

        case Alignment.Left:
            this.X(parentElement.X());
            break;

        case Alignment.Right:
            this.X(parentElement.X() + parentElement.LayoutWidth() - this.LayoutWidth());
            break;

        case Alignment.Center:
            this.X((parentElement.X() + parentElement.LayoutWidth()) - (parentElement.X() + parentElement.LayoutWidth() / 2));
            break;

    }
}

Client.ElementClipped = function (e, side) {
    switch (side) {
        case Side.Top:
            return e.Y() < 0;

        case Side.Right:
            return e.X() + e.LayoutWidth() > Client.Width();

        case Side.Bottom:
            return (e.Y() + e.LayoutHeight()) - Client.VerticalScrollPosition() > Client.Height();

        case Side.Left:
            return e.X();
    }
}

Client.SnapTop = function (e, side) {
    switch (side) {
        case Side.Top:
            e.Y(0);
            break;

        case Side.Right:
            e.X(Client.Width() - e.LayoutWidth());
            break;

        case Side.Bottom:
            e.Y(Client.Height() - e.LayoutHeight());
            break;

        case side.Left:
            e.X(0);
            break;
    }
};

Content.prototype.ElementClipped = function (e) {
    var parentBounds = this.GetBounds();
    parentBounds.Left += this.HorizontalScrollPosition();
    parentBounds.Right += this.HorizontalScrollPosition();
    parentBounds.Top += this.VerticalScrollPosition();
    parentBounds.Bottom += this.VerticalScrollPosition();
    var childBounds = e.GetBounds();
    return !(childBounds.Left >= parentBounds.Left &&
             childBounds.Right <= parentBounds.Right &&
             childBounds.Top >= parentBounds.Top &&
             childBounds.Bottom <= parentBounds.Bottom);
}